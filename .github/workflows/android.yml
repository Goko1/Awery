name: Artifact Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: android.yml
          name: last-sha
          path: .
        continue-on-error: true

      - name: Get Commits Since Last Run
        run: |
          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
          else
            # Fallback to first commit if no previous SHA available
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "Commits since $LAST_SHA:"
          # Accumulate commit logs in a shell variable
          COMMIT_LOGS=$(git log $LAST_SHA..HEAD --pretty=format:"● %s ~%an")
          # URL-encode the newline characters for GitHub Actions
          COMMIT_LOGS="${COMMIT_LOGS//'%'/'%25'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\n'/'%0A'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\r'/'%0D'}"
          # Append the encoded commit logs to the COMMIT_LOG environment variable
          echo "COMMIT_LOG=${COMMIT_LOGS}" >> $GITHUB_ENV
          # Debugging: Print the variable to check its content
          echo "$COMMIT_LOGS"
          echo "$COMMIT_LOGS" > commit_log.txt
          shell: /usr/bin/bash -e {0}
        env:
          CI: true
        continue-on-error: true

      - name: Save Current SHA for Next Run
        run: echo ${{ github.sha }} > last_sha.txt

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Download last SHA artifact (if exists)
        id: download_last_sha
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: android.yml  # Ensure this matches the workflow that uploads last-sha
          name: last-sha
          path: .
        continue-on-error: true

      - name: Get Commits Since Last Run
        run: |
          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
            if git cat-file -e "$LAST_SHA"; then
              echo "Commits since $LAST_SHA:"
              # Accumulate commit logs in a shell variable
              COMMIT_LOGS=$(git log $LAST_SHA..HEAD --pretty=format:"● %s ~%an")
              # URL-encode the newline characters for GitHub Actions
              COMMIT_LOGS="${COMMIT_LOGS//'%'/'%25'}"
              COMMIT_LOGS="${COMMIT_LOGS//$'\n'/'%0A'}"
              COMMIT_LOGS="${COMMIT_LOGS//$'\r'/'%0D'}"
              # Append the encoded commit logs to the COMMIT_LOG environment variable
              echo "COMMIT_LOG=${COMMIT_LOGS}" >> $GITHUB_ENV
              # Debugging: Print the variable to check its content
              echo "$COMMIT_LOGS"
              echo "$COMMIT_LOGS" > commit_log.txt
            else
              echo "Invalid commit SHA stored in last_sha.txt. Falling back to first commit."
              LAST_SHA=$(git rev-list --max-parents=0 HEAD)
            fi
          else
            echo "No last_sha.txt file found. Falling back to first commit."
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
        shell: bash
        env:
          CI: true
        continue-on-error: true
  
      - name: Build Beta APK
        run: ./gradlew assembleBetaModernRelease

      - name: Build Production APK
        run: ./gradlew assembleProdModernRelease

      - name: Build Legacy Beta APK
        run: ./gradlew assembleBetaLegacyRelease

      - name: Build Legacy Production APK
        run: ./gradlew assembleProdLegacyRelease

      - name: Sign Beta APK
        uses: r0adkll/sign-android-release@v1
        id: sign_beta
        with:
          releaseDirectory: "app/build/outputs/apk/betaModern/release"
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Sign Production APK
        uses: r0adkll/sign-android-release@v1
        id: sign_prod
        with:
          releaseDirectory: "app/build/outputs/apk/prodModern/release"
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Sign Legacy Beta APK
        uses: r0adkll/sign-android-release@v1
        id: sign_beta_legacy
        with:
          releaseDirectory: "app/build/outputs/apk/betaLegacy/release"
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Sign Legacy Production APK
        uses: r0adkll/sign-android-release@v1
        id: sign_prod_legacy
        with:
          releaseDirectory: "app/build/outputs/apk/prodLegacy/release"
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Upload Beta APK
        uses: actions/upload-artifact@v4
        with:
          name: "Beta APK"
          retention-days: 90
          path: "app/build/outputs/apk/betaModern/release/app-beta-modern-release-signed.apk"

      - name: Upload Production APK
        uses: actions/upload-artifact@v4
        with:
          name: "Production APK"
          retention-days: 90
          path: "app/build/outputs/apk/prodModern/release/app-prod-modern-release-signed.apk"

      - name: Upload Legacy Beta APK
        uses: actions/upload-artifact@v4
        with:
          name: "Legacy Beta APK"
          retention-days: 90
          path: "app/build/outputs/apk/betaLegacy/release/app-beta-legacy-release-signed.apk"

      - name: Upload Legacy Production APK
        uses: actions/upload-artifact@v4
        with:
          name: "Legacy Production APK"
          retention-days: 90
          path: "app/build/outputs/apk/prodLegacy/release/app-prod-legacy-release-signed.apk"

      - name: Send Beta APK to Telegram
        if: always()
        run: |
          COMMIT_LOG=$(cat commit_log.txt)
          COMMIT_LOG=$(echo "$COMMIT_LOG" | sed 's/%0A/\n/g; s/^/\n/')
          curl -F document=@app/build/outputs/apk/betaModern/release/app-beta-modern-release-signed.apk \
          -F chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -F caption="Alpha Release $COMMIT_LOG" \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument
          
      - name: Send Legacy Beta APK to Telegram
        if: always()
        run: |
          curl -F document=@app/build/outputs/apk/betaLegacy/release/app-beta-legacy-release-signed.apk \
               -F chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
               https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument
               
      - name: Send Beta APK to Discord
        if: always()
        run: |
          commit_id=$(echo "${{ github.sha }}" | cut -c1-7)
          author_name=$(git log -1 --pretty=format:'%an')
          author_link="[$author_name](<https://github.com/${{ github.repository_owner }}>)"
          payload=$(jq -nc --arg content "<@&1208839371575529572> 
          **Commit:** [${commit_id}](<https://github.com/${{ github.repository }}/commit/${{ github.sha }}>) by ${author_link} 
          **Message:** $(cat commit_log.txt)" '{content: $content}') 
          curl -F "payload_json=$payload" \
           -F "file1=@app/build/outputs/apk/betaModern/release/app-beta-modern-release-signed.apk" \
           ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Legacy Beta APK to Discord
        if: always()
        run: |
          curl -F "file1=@app/build/outputs/apk/betaLegacy/release/app-beta-legacy-release-signed.apk" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

          env:
          COMMIT_LOG: ${{ env.COMMIT_LOG }}
          VERSION: ${{ env.VERSION }}

      - name: Upload Current SHA as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: last-sha
          path: last_sha.txt

      - name: Upload Commit log as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: commit-log
          path: commit_log.txt
